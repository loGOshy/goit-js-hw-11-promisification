{"version":3,"sources":["webpack:///./index.js"],"names":["console","log","delay","ms","Promise","resolve","reject","setTimeout","logger","time","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"qLAGAA,QAAQC,IAAI,aAEZ,IAAMC,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,YAAW,WACXF,EAASF,KACNA,OAGHK,EAAS,SAAAC,GAAI,OAAIT,QAAQC,IAAR,kBAA8BQ,EAA9B,OAGvBP,EAAM,KAAMQ,KAAKF,GACjBN,EAAM,KAAMQ,KAAKF,GACjBN,EAAM,MAAMQ,KAAKF,GAInBD,YAAW,WAEXP,QAAQC,IAAI,aACZ,IAAMU,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIZ,SAAQ,SAACC,EAASC,GAC3BD,EAASU,EAASE,KAAI,SAAAC,GAAI,OAC1BA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAI7DV,EAAS,SAAAW,GAAY,OAAInB,QAAQoB,MAAMD,IAW7CL,EAAgBH,EAAO,SAASD,KAAKF,GACrCM,EAAgBH,EAAO,OAAOD,KAAKF,KAElC,MAGDD,YAAW,WACTP,QAAQC,IAAI,aAEZ,IAIQoB,EAAkB,SAACC,GACrB,OAAO,IAAIlB,SAAS,SAACC,EAASC,GAEhC,IAP+BiB,EAAKC,EAO9BtB,GAPyBqB,EAOS,IAPJC,EAOS,IANtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAQpDhB,YAAW,WACUkB,KAAKE,SAAW,IAGjCtB,EAAS,CAACiB,EAAYM,GAAI1B,IAE5BI,EAAQgB,EAAYM,MACnB1B,OAGC2B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAVnB,EAAU,KACjCT,QAAQC,IAAR,eAA2B,CAAC2B,GAA5B,iBAAgD,CAACnB,GAAjD,OAEIqB,EAAW,SAAAF,GACf5B,QAAQ+B,KAAR,gCAA6CH,EAA7C,8BAYFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,KACT,O","file":"main.944f7fbb0ffd91b04772.js","sourcesContent":["import './styles.css';\n\n{// Задание 1\nconsole.log('Задание 1');\n\nconst delay = ms => {    \n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n        resolve (ms);\n        }, ms);\n    })   \n};  \n  const logger = time => console.log(`Resolved after ${time}ms`);\n  \n  // Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms\n}\n\n//   Задание 2\nsetTimeout(() => {\n\nconsole.log('Задание 2');\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n  \n  const toggleUserState = (allUsers, userName) => {\n      return new Promise((resolve, reject) =>{\n        resolve (allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user\n        ))\n      })  \n  };  \n  const logger = updatedUsers => console.table(updatedUsers);\n  \n  /*\n   * Сейчас работает так\n   */\n//   toggleUserState(users, 'Mango', logger);\n//   toggleUserState(users, 'Lux', logger);\n  \n  /*\n   * Должно работать так\n   */\n  toggleUserState(users, 'Mango').then(logger);\n  toggleUserState(users, 'Lux').then(logger);\n\n}, 2500);\n\n// Задание 3\n{ setTimeout(()=>{\n    console.log('Задание 3');\n\n    const randomIntegerFromInterval = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n      };\n      \n      const makeTransaction = (transaction) => {\n          return new Promise ((resolve, reject) => {\n\n        const delay = randomIntegerFromInterval(200, 500);\n        \n        setTimeout(() => {\n          const canProcess = Math.random() > 0.3;\n      \n          if (canProcess) {\n            resolve ([transaction.id, delay]);\n          } \n          reject (transaction.id)\n        }, delay);\n})\n      };      \n      const logSuccess = ([id, time]) => {\n        console.log(`Transaction ${[id]} processed in ${[time]}ms`);\n      };      \n      const logError = id => {\n        console.warn(`Error processing transaction ${id}. Please try again later.`);\n      };      \n      /*\n       * Работает так\n       */\n    //   makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n    //   makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n    //   makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n    //   makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n      /*\n       * Должно работать так\n       */\n      makeTransaction({ id: 70, amount: 150 })\n        .then(logSuccess)\n        .catch(logError);\n      \n      makeTransaction({ id: 71, amount: 230 })\n        .then(logSuccess)\n        .catch(logError);\n      \n      makeTransaction({ id: 72, amount: 75 })\n        .then(logSuccess)\n        .catch(logError);\n      \n      makeTransaction({ id: 73, amount: 100 })\n        .then(logSuccess)\n        .catch(logError);\n    },3000)\n}\n"],"sourceRoot":""}